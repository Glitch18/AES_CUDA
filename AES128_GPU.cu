#include<iostream>
#include<string>
#include<stdio.h>
#include<cuda.h>
#include<chrono>
using namespace std::chrono;
using namespace std;

unsigned char sbox[256] = {
  //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };

unsigned char h_mixer[16] = {0x02,0x03,0x01,0x01,0x01,0x02,0x03,0x01,0x01,0x01,0x02,0x03,0x03,0x01,0x01,0x02};

__global__ void MixCol(unsigned char* d_mixer,unsigned char* d_ciphertext,unsigned char* d_answer){
  int index = int(threadIdx.x);
  d_answer[index] = 0x00;
  int i = 4*(index%4);
  int j = 4*(index/4);

  while(i<4*(index%4+1)){
    if(d_mixer[i]==0x01){
      d_answer[index] ^= d_ciphertext[j];
    }
    else if(d_mixer[i]==0x02){
      if(d_ciphertext[j]<0x80) d_answer[index] ^= d_ciphertext[j] << 1;
      else d_answer[index] ^= (d_ciphertext[j] << 1)^(0x1B);
    }
    else{
      unsigned char x;
      if(d_ciphertext[j]<0x80) x = d_ciphertext[j] << 1;
      else x = (d_ciphertext[j] << 1)^(0x1B);
      d_answer[index] ^= x^d_ciphertext[j];
    }
    i++;
    j++;
  }
}

__global__ void ShiftRow(unsigned char* d_ciphertext){
  unsigned char copy[16];
  for(int i=0;i<16;i++) copy[i] = d_ciphertext[i];
  int indexes[16] = {0,5,10,15,4,9,14,3,8,13,2,7,12,1,6,11};
  d_ciphertext[threadIdx.x] = copy[indexes[threadIdx.x]];
}

__global__ void KeyAddition(unsigned char* d_ciphertext,unsigned char* d_key,int i){
  d_ciphertext[threadIdx.x] ^= *(d_key+16*i+threadIdx.x);
}

__global__ void sBox(unsigned char* d_ciphertext,unsigned char* d_sbox){
  d_ciphertext[threadIdx.x] = d_sbox[d_ciphertext[threadIdx.x]];
}

void RoundKeyGenerator(unsigned char key[11][16]){
  unsigned char w[4];
  unsigned char rcon[10] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1B,0x36};

  for(int j=1;j<=10;j++){
    for(int i=0;i<3;i++) w[i] = key[j-1][i+13];
    w[3] = key[j-1][12];
    for(int i=0;i<4;i++) w[i] = sbox[w[i]];
    w[0] = w[0] ^ rcon[j-1];
    for(int i=0;i<4;i++) key[j][i] = key[j-1][i]^w[i];
    for(int i=4;i<16;i++) key[j][i] = key[j-1][i]^key[j][i-4];
  }
}

int main(){
  unsigned char key[11][16];
  unsigned char plaintext[16];

  printf("Plaintext: \n");
  fread(plaintext,sizeof(unsigned char),16,stdin);

  printf("Key: \n");
  while((getchar()) != '\n'); //Clear buffer
  fread(key[0],sizeof(unsigned char),16,stdin);

  RoundKeyGenerator(key);

  unsigned char* d_answer;
  unsigned char* d_ciphertext;
  unsigned char* d_key;
  unsigned char* d_mixer;
  unsigned char* d_sbox;
  cudaMalloc((void**)&d_sbox,256*sizeof(unsigned char));
  cudaMalloc((void**)&d_answer,16*sizeof(unsigned char));
  cudaMalloc((void**)&d_ciphertext,16*sizeof(unsigned char));
  cudaMalloc((void**)&d_mixer,16*sizeof(unsigned char));
  cudaMalloc((void**)&d_key,11*16*sizeof(unsigned char));
  cudaMemcpy(d_sbox,sbox,256*sizeof(unsigned char),cudaMemcpyHostToDevice);
  cudaMemcpy(d_mixer,h_mixer,16*sizeof(unsigned char),cudaMemcpyHostToDevice);
  cudaMemcpy(d_ciphertext,plaintext,16*sizeof(unsigned char),cudaMemcpyHostToDevice);
  for(int i=0;i<11;i++) cudaMemcpy(d_key+16*i,key[i],16*sizeof(unsigned char),cudaMemcpyHostToDevice);

  //Round 0: Key whitening
  auto start = high_resolution_clock::now();
  KeyAddition<<<1,16>>>(d_ciphertext,d_key,0);

  //Rounds 1 to 9
  for(int j=1;j<=9;j++){
    sBox<<<1,16>>>(d_ciphertext,d_sbox);
    ShiftRow<<<1,16>>>(d_ciphertext);
    MixCol<<<1,16>>>(d_mixer,d_ciphertext,d_answer);
    cudaMemcpy(d_ciphertext,d_answer,16*sizeof(unsigned char),cudaMemcpyDeviceToDevice);
    KeyAddition<<<1,16>>>(d_ciphertext,d_key,j);
  }

  //Round 10
  sBox<<<1,16>>>(d_ciphertext,d_sbox);
  ShiftRow<<<1,16>>>(d_ciphertext);
  KeyAddition<<<1,16>>>(d_ciphertext,d_key,10);

  auto stop = high_resolution_clock::now();
  auto time = duration_cast<microseconds>(stop-start);

  printf("Ciphertext: ");
  cudaMemcpy(plaintext,d_ciphertext,16*sizeof(unsigned char),cudaMemcpyDeviceToHost);
  for(int i=0;i<16;i++) printf("%X ",plaintext[i]);
  cout << "\nTime Taken : " << time.count();
}
